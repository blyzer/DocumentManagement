
@{
    ViewBag.Title = L(DocumentResourceNames.CreateDocument);
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section styles{
    <link rel="stylesheet" href="/Scripts/jqwidgets/styles/jqx.base.css" type="text/css" />
    <link rel="stylesheet" href="/Scripts/jqwidgets/styles/jqx.light.css" type="text/css" />
    <!-- Select2 -->
    <link rel="stylesheet" href="~/Scripts/admin_lte/bower_components/select2/dist/css/select2.min.css">
    <link rel="stylesheet" href="~/Content/jquery.fileupload-ui.css" type="text/css" />
    <link rel="stylesheet" href="~/Content/jquery.fileupload.css" type="text/css" />
}
<div class="box box-info">
    <form role="form" action="/" id="formDocument">
        @Html.AntiForgeryToken()
        <div class="box-header with-border">
            <h3 class="box-title">@L(DocumentResourceNames.CreateDocument)</h3>
            <div class="mailbox-controls">
                <div class="btn-group">
                    <a href="@Url.Action("List")" class="btn btn-success btn-sm">
                        <i class="fa fa-arrow-circle-left" aria-hidden="true"></i> @Ls(DTWebConsts.LocalizationSourceName, DTWebResourceNames.List)
                    </a>
                    <button id="btnSubmit" type="submit" class="btn btn-primary btn-sm">
                        <i class="fa fa-floppy-o" aria-hidden="true"></i> @Ls(DTWebConsts.LocalizationSourceName, DTWebResourceNames.Save)
                    </button>
                    <button id="btnSaveAndRelease" type="submit" class="btn btn-primary btn-sm">
                        <i class="fa fa-floppy-o" aria-hidden="true"></i> @L(DocumentResourceNames.SaveAndRelease)
                    </button>
                </div>
            </div>
        </div>
        <div class="box-body">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Code) <span style="color: red">(*)</span></label>
                        <i id="code-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Mã tài liệu là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               name="Code"
                               id="Code"
                               data-validation="length"
                               data-validation-length="3-128"
                               data-validation-allowing=" " />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Name) <span style="color: red">(*)</span></label>
                        <i id="code-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Tên tài liệu là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               name="Name"
                               id="Name"
                               data-validation="length"
                               data-validation-length="4-512"
                               data-validation-allowing=" " />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.DocumentType) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Loại tài liệu là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               id="DocumentType"
                               name="DocumentType"
                               data-validation="required" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.CompanyCode) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Công ty là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               id="CompanyCode"
                               name="CompanyCode"
                               data-validation="required" />
                        <input type="hidden"
                               id="CompanyName"
                               name="CompanyName" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.DepartmentCode) <span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Phòng ban là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               id="DepartmentCode"
                               name="DepartmentCode"
                               data-validation="required" />
                        <input type="hidden"
                               id="DepartmentName"
                               name="DepartmentName" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Module) <span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Phân hệ là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               id="Module"
                               name="Module"
                               data-validation="required" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.DocumentNumber) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Số hiệu là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               autocomplete="off"
                               id="DocumentNumber"
                               name="DocumentNumber"
                               data-validation="required" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.ReviewNumber)<span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Số soán xét là bắt buộc"></i>
                        <input type="text"
                               class="form-control"
                               autocomplete="off"
                               id="ReviewNumber"
                               name="ReviewNumber"
                               data-validation="required" />
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.EffectiveDate) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Ngày hiệu lực là bắt buộc không được bỏ trống"></i>
                        <input type="text"
                               class="form-control"
                               autocomplete="off"
                               id="EffectiveDate"
                               name="EffectiveDate" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>
                            @L(DocumentResourceNames.ReviewDate)
                            <span style="color: red">(*)</span>

                        </label>

                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Ngày soát xét là bắt buộc không được bỏ trống"></i>
                        &nbsp;
                        <div class="input-group">
                            <input type="text"
                                   class="form-control"
                                   autocomplete="off"
                                   id="ReviewDate"
                                   name="ReviewDate" />
                            <div class="input-group-btn">
                                <div class="btn-group-sm" data-toggle="buttons">
                                    <button class="btn btn-sm btn-success"
                                            id="OneYear">
                                        1 @L(DocumentResourceNames.Year)
                                    </button>
                                    <button class="btn btn-sm btn-success"
                                            id="TwoYear">
                                        2 @L(DocumentResourceNames.Year)
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Status) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Tình trạng tài liệu"></i>
                        <select type="text"
                                class="form-control"
                                autocomplete="off"
                                id="StatusId"
                                name="StatusId"
                                disabled></select>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.PromulgateStatus)<span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Trạng thái ban hành tài liệu"></i>
                        <select type="text"
                                class="form-control"
                                autocomplete="off"
                                id="PromulgateStatusId"
                                name="PromulgateStatusId"
                                disabled></select>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Drafter) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Người soạn thảo là bắt buộc không được bỏ trống"></i>
                        <select class="form-control"
                                id="Drafter"
                                name="Drafter"
                                multiple
                                data-validation="required"></select>
                    </div>
                </div>
                <div class="col-md-4">
                    <label>@L(DocumentResourceNames.Auditor) <span style="color: red">(*)</span></label>
                    <i id="clientid-help"
                       class="fa fa-info-circle red-text"
                       data-toggle="tooltip"
                       data-placement="top"
                       title="Người kiểm tra là bắt buộc không được bỏ trống"></i>
                    <select class="form-control"
                            id="Auditor"
                            name="Auditor"
                            multiple
                            data-validation="required"></select>
                </div>
                <div class="col-md-4">
                    <label>@L(DocumentResourceNames.Approver) <span style="color: red">(*)</span></label>
                    <i id="clientid-help"
                       class="fa fa-info-circle red-text"
                       data-toggle="tooltip"
                       data-placement="top"
                       title="Người phê duyệt là bắt buộc không được bỏ trống"></i>
                    <select type="text"
                            class="form-control"
                            id="Approver"
                            name="Approver"
                            multiple
                            data-validation="required"></select>
                </div>
            </div>
            <div class="row">
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.DCCAudited)</label>
                        <i id="replaceof-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Được thay thế cho tài liệu nào"></i>
                        <br>
                        <input type="checkbox"
                               id="DCCAudited"
                               name="DCCAudited" />
                        <input type="hidden"
                               name="DCCAudited" />
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.Active)<span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Hiệu lực"></i>
                        <br>
                        <input type="checkbox"
                               id="Active"
                               name="Active" />
                        <input type="hidden"
                               name="Active" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label>@L(DocumentResourceNames.Description)</label>
                <i id="code-help"
                   class="fa fa-info-circle red-text"
                   data-toggle="tooltip"
                   data-placement="top"
                   title="Diễn giải vắn tắt các thông tin về tài liệu"></i>
                <textarea class="form-control"
                          name="Description"
                          id="Description"
                          rows="10"></textarea>
            </div>
            <div class="form-group">
                <label>@L(DocumentResourceNames.ContentChange)</label>
                <i id="code-help"
                   class="fa fa-info-circle red-text"
                   data-toggle="tooltip"
                   data-placement="top"
                   title="Nội dung thay đổi nếu có"></i>
                <textarea class="form-control"
                          name="ContentChange"
                          id="ContentChange"
                          rows="10"></textarea>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.ScopeOfApplication) <span style="color: red">(*)</span></label>
                        <i id="companycode-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Phạm vi áp dụng"></i>
                        <textarea type="text"
                                  class="form-control"
                                  id="ScopeOfApplication"
                                  rows="10"
                                  name="ScopeOfApplication"></textarea>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.ScopeOfDeloyment) <span style="color: red">(*)</span></label>
                        <i id="clientid-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Phạm vi triển khai"></i>
                        <select class="form-control"
                                id="ScopeOfDeloyment"
                                name="ScopeOfDeloyment"
                                multiple
                                data-validation="required"></select>
                        <button type="button"
                                id="btnAll"
                                class="btn btn-primary btn-sm">
                            All
                        </button>
                        <button type="button"
                                id="btnRemoveAll"
                                class="btn btn-primary btn-sm">
                            Remove All
                        </button>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>@L(DocumentResourceNames.RelateToDocuments)</label>
                        <i id="RelateToDocuments-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Các tài liệu liên quan"></i>
                        <div id="grdRelateToDocuments"></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Phụ lục</label>
                        <i id="RelateToDocuments-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Phụ lục tài liệu"></i>
                        <div id="grdAppendieDocuments"></div>
                    </div>
                </div>
            </div>
            <div class="row">
                <div class="col-md-12">
                    <div class="form-group">
                        <label>Link files:</label>
                        <i id="LinkFiles-help"
                           class="fa fa-info-circle red-text"
                           data-toggle="tooltip"
                           data-placement="top"
                           title="Các tài liệu liên quan"></i>
                        <br>
                        <span class="btn btn-success fileinput-button">
                            <i class="glyphicon glyphicon-plus"></i>
                            <span>@L(DocumentResourceNames.SelectFiles)</span>
                            <!-- The file input field used as target for the file upload widget -->
                            <input id="fileupload" type="file" name="files[]">
                        </span>
                        <table role="presentation" class="table table-striped">
                            <tbody class="files"></tbody>
                        </table>
                        <!-- The template to display files available for upload -->
                        <script id="template-upload" type="text/x-tmpl">
                            {% for (var i=0, file; file=o.files[i]; i++) { %}
                            <tr>
                                <td>
                                    <span class="preview"></span>
                                </td>
                                <td>
                                    {% if (window.innerWidth > 480 || !o.options.loadImageFileTypes.test(file.type)) { %}
                                    <p class="name" data-file="{%=file.name%}" name="fileName">{%=file.name%}</p>
                                    {% } %}
                                    <strong class="error text-danger">{%=file.error%}</strong>
                                </td>
                                <td>
                                    <p class="size">{%=formatFileSize(file.size)%}</p>

                                </td>
                                <td>
                                    <button type="button" name="deleteFile" class="btn btn-warning cancel">
                                        <i class="glyphicon glyphicon-ban-circle"></i>
                                        <span>Xóa</span>
                                    </button>
                                </td>
                            </tr>
                            {% } %}
                        </script>
                    </div>
                </div>
            </div>
        </div>
        <div class="box-footer clearfix no-border">
            <div class="mailbox-controls">
                <div class="btn-group">
                    <a href="@Url.Action("List")" class="btn btn-success btn-sm">
                        <i class="fa fa-arrow-circle-left" aria-hidden="true"></i> @Ls(DTWebConsts.LocalizationSourceName, DTWebResourceNames.List)
                    </a>
                    <button id="btnSubmit" type="submit" class="btn btn-primary btn-sm">
                        <i class="fa fa-floppy-o" aria-hidden="true"></i> @Ls(DTWebConsts.LocalizationSourceName, DTWebResourceNames.Save)
                    </button>
                    <button id="btnSaveAndRelease" type="submit" class="btn btn-primary btn-sm">
                        <i class="fa fa-floppy-o" aria-hidden="true"></i> @L(DocumentResourceNames.SaveAndRelease)
                    </button>
                </div>
            </div>
        </div>
    </form>
    <div class="modal fade" id="modal-default">
        <div class="modal-dialog" style="width: 900px;">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Copy Appendice</h4>
                </div>
                <div class="modal-body">
                    @Html.Partial("~/Views/Shared/_CopyAppendicePopupPartial.cshtml")
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default pull-left" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary">Save changes</button>
                </div>
            </div>
            <!-- /.modal-content -->
        </div>
        <!-- /.modal-dialog -->
    </div>
    <!-- /.modal -->
</div>

@section scripts
{
    @Scripts.Render("~/bundles/jqueryval")
    <!-- Select 2-->
    <script src="~/Scripts/admin_lte/bower_components/select2/dist/js/select2.full.min.js"></script>
    <!-- InputMask -->
    <script src="/Scripts/admin_lte/plugins/input-mask/jquery.inputmask.js"></script>
    <script src="/Scripts/admin_lte/plugins/input-mask/jquery.inputmask.date.extensions.js"></script>
    <script src="/Scripts/admin_lte/plugins/input-mask/jquery.inputmask.extensions.js"></script>

    <!--Auto numeric-->
    <script src="~/Scripts/autoNumeric-1.9.41.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxcore.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxdata.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxbuttons.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxscrollbar.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxmenu.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.edit.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.selection.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.columnsresize.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxlistbox.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxdropdownlist.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxcheckbox.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxtextarea.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxcalendar.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxnumberinput.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxdatetimeinput.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.pager.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxgrid.sort.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxinput.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/jqxfileupload.js"></script>
    <script type="text/javascript" src="/Scripts/jqwidgets/jqxgrid.grouping.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/globalization/globalize.js"></script>
    <script type="text/javascript" src="~/Scripts/jqwidgets/localization.js"></script>
    <script type="text/javascript" src="~/Scripts/demos.js"></script>
    <script src="~/Scripts/jquery.fileupload.js"></script>
    <script src="~/Scripts/tmpl.min.js"></script>s
    <script type="text/javascript">
        Globalize.cultureSelector = '@CurrentLanguage.Name';
    </script>
    <script>
        let departments = [];
        let documentTypes = [];
        let users = [];
        let companies = [];
        let groups = [];
        let modules = [];
        let documents = [];
        let statuses = [];
        let promulgateStatuses = [];

        let $Approver = $('#Approver');
        let $Drafter = $('#Drafter');
        let $Auditor = $('#Auditor');
        let $CompanyCode = $('#CompanyCode');
        let $DepartmentCode = $('#DepartmentCode');
        let $CompanyName = $('#CompanyName');
        let $DepartmentName = $('#DepartmentName');
        let $DocumentType = $('#DocumentType');
        let $ScopeOfApplication = $('#ScopeOfApplication');
        let $ScopeOfDeloyment = $('#ScopeOfDeloyment');
        let $Module = $('#Module');
        let $PromulgateStatusId = $('#PromulgateStatusId');
        let $StatusId = $('#StatusId');
        let $OneYear = $('#OneYear');
        let $TwoYear = $('#TwoYear');

        let $btnSubmit = $('#btnSubmit');
        let storedFiles = [];
        let appendiceFiles = [];

        const documentCodeText = '@L(DocumentResourceNames.Code)';
        const documentNameText = '@L(DocumentResourceNames.Name)';
        const companyText = '@L(DocumentResourceNames.CompanyCode)';
        const departmentText = '@L(DocumentResourceNames.DepartmentCode)';
        const moduleText = '@L(DocumentResourceNames.Module)';
        const documentNumberText = '@L(DocumentResourceNames.DocumentNumber)';
        const reviewNumberText = '@L(DocumentResourceNames.ReviewNumber)';
        const documentTypeText = '@L(DocumentResourceNames.DocumentType)';
        const relateDocumentText = '@L(DocumentResourceNames.RelateToDocuments)';
        const replaceOfText = '@L(DocumentResourceNames.ReplaceOf)';
        const effectiveDateText = '@L(DocumentResourceNames.EffectiveDate)';
        const reviewDateText = '@L(DocumentResourceNames.ReviewDate)';
    </script>
    <script type="text/javascript">
        const uploadTemplate = tmpl('template-upload');
        $(document).ready(function () {
            $('#fileupload').fileupload({
                autoUpload: false,
                disableImageResize: /Android(?!.*Chrome)|Opera/
                    .test(window.navigator.userAgent),
                maxFileSize: 9990000,
                change: function (e, data) {
                    renderUpload(data.files);
                    $('button[name=deleteFile]').click(deleteHandler);
                },
                acceptFileTypes: /(\.|\/)(gif|jpe?g|png|xls|pdf|xslx)$/i
            });
        });

        function renderTemplate(func, files) {
            if (!func) {
                return $();
            }
            var result = func({
                files: files,
                formatFileSize: this._formatFileSize,
                options: this.options
            });
            if (result instanceof $) {
                return result;
            }
            storedFiles = files;
            return $('.files').html(result).children();
        }

        function renderUpload(files) {
            return renderTemplate(
                uploadTemplate,
                files
            );
        }

        function formatFileSize(bytes) {
            if (typeof bytes !== 'number') {
                return '';
            }
            if (bytes >= 1000000000) {
                return (bytes / 1000000000).toFixed(2) + ' GB';
            }
            if (bytes >= 1000000) {
                return (bytes / 1000000).toFixed(2) + ' MB';
            }
            return (bytes / 1000).toFixed(2) + ' KB';
        }

        function deleteHandler(e) {
            e.preventDefault();
            const tr = $(this).closest('tr');
            let fileName = tr.find('p[name=fileName]').data("file");

            for (let i = 0; i < storedFiles.length; i++) {
                if (storedFiles[i].name === fileName) {
                    storedFiles.splice(i, 1);
                    tr.remove();
                    break;
                }
            }
        }
    </script>
    <script>
        function genDocumentCode() {
            return 'TL' + moment().format('Ymdhmmss');;
        }
    </script>
    <!--Relate To Documents-->
    <script>
        let relateToDocuments = [{
            id: 1,
            effectiveDate: '',
            displayText: '',
            reviewDate: '',
            fileName: '',
            folderName: '',
            name: '',
            code: '',
            documentNumber: ''
        }];
        let grdRelateToDocuments = $('#grdRelateToDocuments');
        let observableSourceRelateToDocuments = new $.jqx.observableArray(relateToDocuments);
        let sourceRelateToDocument =
        {
            localdata: observableSourceRelateToDocuments,
            datatype: "obserableArray",
            id: "id",
            updaterow: function (rowid, rowdata, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failder.

                commit(true);
            },
            pagesize: 5,
            pagesizeoptions: ["5", "10", "20"],
            datafields:
                [
                    { name: 'id', type: 'int' },
                    { name: 'code', type: 'string' },
                    { name: 'name', type: 'string' },
                    { name: 'fileName', type: 'string' },
                    { name: 'folderName', type: 'string' },
                    { name: 'effectiveDate', type: 'date' },
                    { name: 'reviewDate', type: 'date' },
                    { name: 'documentNumber', type: 'string' },
                    { name: 'reviewNumber', type: 'string' }
                ]
        };

        let getEditorDataAdapter = function (datafield) {
            let source =
            {
                localdata: documents,
                datatype: "array",
                datafields:
                    [
                        { name: 'id', type: 'int' },
                        { name: 'code', type: 'string' },
                        { name: 'name', type: 'string' },
                        { name: 'fileName', type: 'string' },
                        { name: 'folderName', type: 'string' },
                        { name: 'displayText', type: 'string' },
                        { name: 'documentNumber', type: 'string' },
                        { name: 'reviewNumber', type: 'string' }
                    ]
            };
            let dataAdapter = new $.jqx.dataAdapter(source, { uniqueDataFields: [datafield] });
            return dataAdapter;
        }

        let relateToDocumentsDataAdapter = new $.jqx.dataAdapter(sourceRelateToDocument);
        const initGrdRelateToDocuments = function () {
            grdRelateToDocuments.jqxGrid(
                {
                    width: '100%',
                    height: 250,
                    source: relateToDocumentsDataAdapter,
                    pageable: true,
                    autorowheight: true,
                    columnsresize: true,
                    altrows: false,
                    editable: true,
                    pagesizeoptions: ["5", "10", "20"],
                    localization: getLocalization('@CurrentLanguage.Name'),
                    selectionmode: 'singlerow',
                    editmode: 'singlecell',
                    showstatusbar: false,
                    showtoolbar: true,
                    rendertoolbar: function (toolbar) {
                        const container = $(`<div class="btn-group" style='margin: 2px;'></div>`);
                        toolbar.append(container);
                        container.append(`<button id="btnAddRelateToDocuments"
                                                         type="button"
                                                         class="btn btn-primary btn-sm"
                                                          >Thêm mới</button>`);
                        let btnRemoverelateToDocuments = $(`<button id="btnRemoveRelateToDocuments"
                                    type="button"
                                    class="btn btn-primary btn-sm">
                                    <i class="fa fa-trash-o"></i> Xóa
                                    </button>`);
                        container.append(btnRemoverelateToDocuments);
                        // create new row.
                        $('#btnAddRelateToDocuments').on('click', function () {
                            const datarow = {
                                id: 2,
                                fileName: '',
                                folderName: '',
                                displayText:'',
                                name: '',
                                code: '',
                                effectiveDate: '',
                                reviewDate: '',
                                documentNumber: ''
                            };
                            observableSourceRelateToDocuments.push(datarow);
                        });

                        btnRemoverelateToDocuments.click(function () {
                            const selectedrowindex = grdRelateToDocuments.jqxGrid('getselectedrowindex');
                            const rowscount = grdRelateToDocuments.jqxGrid('getdatainformation').rowscount;
                            if (selectedrowindex >= 0 && selectedrowindex < rowscount) {
                                observableSourceRelateToDocuments.splice(selectedrowindex, 1);
                            }
                        });
                    },
                    columns: [
                        {
                            text: 'STT',
                            sortable: false,
                            filterable: false,
                            editable: false,
                            groupable: false,
                            draggable: false,
                            pinned: true,
                            datafield: '',
                            columntype: 'number',
                            width: 40,
                            cellsrenderer: function (row, column, value) {
                                return "<div style='margin:4px;'>" + (value + 1) + "</div>";
                            }
                        },
                        {
                            text: documentNameText,
                            columntype: 'textbox',
                            datafield: 'displayText',
                            pinned: true,
                            editable: true,
                            width: 300,
                            geteditorvalue: function (row, cellvalue, editor) {
                                // return the editor's value.
                                return editor.val();
                            },
                            initeditor: function (row, cellvalue, editor, celltext, pressedkey) {
                                // set the editor's current value. The callback is called each time the editor is displayed.
                                if (pressedkey) {
                                    editor.val(pressedkey);
                                    editor.jqxInput('selectLast');
                                }
                                else {
                                    editor.val(cellvalue);
                                    editor.jqxInput('selectAll');
                                }
                            },
                            createeditor: function (row, cellvalue, editor, cellText, width, height) {
                                editor.jqxInput({
                                    placeHolder: "Nhập tên tài liệu",
                                    height: height,
                                    width: width,
                                    minLength: 1,
                                    displayMember: 'displayText',
                                    //valueMember:'name',
                                    source: getEditorDataAdapter('displayText')
                                });

                                editor.on('select', function (event) {
                                    if (event.args) {
                                        let item = event.args.item;
                                        if (!isVariableHaveDefaultVal(item)) {
                                            const document = documents.filter(document => document.displayText === item.label);
                                            if (!isVariableHaveDefaultVal(document)) {
                                                observableSourceRelateToDocuments.set(`${row}.documentNumber`, document[0].documentNumber);
                                                observableSourceRelateToDocuments.set(`${row}.effectiveDate`, document[0].effectiveDate);
                                                observableSourceRelateToDocuments.set(`${row}.reviewDate`, document[0].reviewDate);
                                                observableSourceRelateToDocuments.set(`${row}.code`, document[0].code);
                                                observableSourceRelateToDocuments.set(`${row}.fileName`, document[0].fileName);
                                                observableSourceRelateToDocuments.set(`${row}.folderName`, document[0].folderName);
                                            }
                                        }
                                    }
                                });
                            },
                            validation: function (cell, value) {
                                if (isVariableHaveDefaultVal(value)){
                                    return { result: false, message: "Tên tài liệu không được bỏ trống(chú ý nếu đang edit thì cần nhấn phím Enter để update thông tin)" };
                                }
                                const index = getRelateToDocumentIndexByText(value, cell.row);
                                if (index >= 0) {
                                    return { result: false, message: "Tài liệu này đã tồn tại trong danh sách" };
                                }
                                return true;
                            }
                        },
                        {
                            text: 'Files',
                            columntype: 'textbox',
                            datafield: 'fileName',
                            pinned: false,
                            editable: false,
                            width: 250,
                            cellsrenderer: function (row, column, value, defaultHtml) {
                                const element = $(defaultHtml);
                                const fileNames = value.split(';');
                                const folderName = relateToDocumentsDataAdapter.records[row].folderName;
                                if (!isVariableHaveDefaultVal(fileNames)
                                    && !isVariableHaveDefaultVal(folderName)) {
                                    if (fileNames.length > 0) {
                                        let html = '';
                                        for (let index = 0; index < fileNames.length; index++) {
                                            if (!isVariableHaveDefaultVal(fileNames[index])) {
                                                const filePath = `${folderName}/${fileNames[index]}`;
                                                let fileIcon = 'fa fa-file-o';
                                                switch (getFileExtension(fileNames[index])) {
                                                    case 'pdf':
                                                        fileIcon = 'fa fa-file-pdf-o';
                                                        break;
                                                    case 'xls':
                                                        fileIcon = 'fa fa-file-excel-o';
                                                        break;
                                                    case 'xlsx':
                                                        fileIcon = 'fa fa-file-excel-o';
                                                        break;
                                                    case 'doc':
                                                        fileIcon = 'fa fa-file-word-o';
                                                        break;
                                                    case 'docx':
                                                        fileIcon = 'fa fa-file-word-o';
                                                        break;
                                                }
                                                html = html + `<a target="_blank" href="/downloadfile/viewfile?sourceDoc=${filePath}"> <i class="${fileIcon}"></i> ${fileNames[index]}</a><br>`;
                                            }
                                        }
                                        if (!isVariableHaveDefaultVal(html)) {
                                            element.html(html);
                                        }
                                    }
                                }
                                return element[0].outerHTML;
                            }
                        },
                        {
                            text: documentNumberText,
                            columntype: 'textbox',
                            datafield: 'documentNumber',
                            pinned: false,
                            editable: false,
                            width: 100
                        },
                        {
                            text: effectiveDateText,
                            datafield: 'effectiveDate',
                            columntype: 'datetimeinput',
                            width: 110,
                            align: 'right',
                            cellsalign: 'right',
                            filtertype: 'range',
                            cellsformat: 'd',
                            editable: false
                        },
                        {
                            text: reviewDateText,
                            datafield: 'reviewDate',
                            columntype: 'datetimeinput',
                            width: 110,
                            align: 'right',
                            cellsalign: 'right',
                            filtertype: 'range',
                            cellsformat: 'd',
                            editable: false
                        },
                        {
                            text: 'Mã tài liệu',
                            columntype: 'textbox',
                            hidden: true,
                            datafield: 'code',
                            pinned: false,
                            editable: false,
                            width: 300
                        },
                        {
                            columntype: 'textbox',
                            hidden: true,
                            datafield: 'folderName',
                            pinned: false,
                            editable: false,
                            width: 300
                        }]
                });
        }

        function getRelateToDocumentIndexByText(text, currentRowIndex) {
            let index = -1;
            for (let i = 0; i < relateToDocumentsDataAdapter.records.length; i++) {
                if (i !== currentRowIndex && relateToDocumentsDataAdapter.records[i].displayText === text) {
                    index = i;
                    break;
                }
            }
            return index;
        }

        function getRelateToDocuments() {
            let documents = relateToDocumentsDataAdapter.records.filter(function (d) {
                if (!isVariableHaveDefaultVal(d.code)) {
                    return true;
                }
                return false;
            });
            return documents;
        }
    </script>
    <!-- Appendie Documents -->
    <script>
        let appendieDocuments = [{
            id: 1,
            name: '',
            code: '',
            documentNumber: '',
            reviewNumber: '',
            fileName: '',
        }];
        let grdAppendieDocuments = $('#grdAppendieDocuments');
        let observableSourceAppendieDocuments = new $.jqx.observableArray(appendieDocuments);
        let sourceAppendieDocument =
        {
            localdata: observableSourceAppendieDocuments,
            datatype: "obserableArray",
            id: "id",
            updaterow: function (rowid, rowdata, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failder.

                commit(true);
            },
            pagesize: 5,
            pagesizeoptions: ["5", "10", "20"],
            datafields:
                [
                    { name: 'id', type: 'int' },
                    { name: 'code', type: 'string' },
                    { name: 'name', type: 'string' },
                    { name: 'documentNumber', type: 'string' },
                    { name: 'reviewNumber', type: 'string' },
                    { name: 'fileName', type: 'string'}
                ]
        };

        let appendieDocumentsDataAdapter = new $.jqx.dataAdapter(sourceAppendieDocument, { uniqueDataFields: ['name'] });
        const initGrdAppendieDocuments = function () {
            grdAppendieDocuments.jqxGrid(
                {
                    width: '100%',
                    height: 250,
                    source: appendieDocumentsDataAdapter,
                    pageable: true,
                    autorowheight: false,
                    columnsresize: true,
                    altrows: false,
                    editable: true,
                    pagesizeoptions: ["5", "10", "20"],
                    localization: getLocalization('@CurrentLanguage.Name'),
                    selectionmode: 'singlerow',
                    editmode: 'singlecell',
                    showstatusbar: false,
                    showtoolbar: true,
                    rendertoolbar: function (toolbar) {
                        const container = $(`<div class="btn-group" style='margin: 2px;'></div>`);
                        toolbar.append(container);
                        container.append(`<button id="btnAddAppendieDocuments"
                                                         type="button"
                                                         class="btn btn-primary btn-sm"
                                                          >Thêm mới</button>`);
                        let btnRemoveAppendieDocuments = $(`<button id="btnRemoveAppendieDocuments"
                                    type="button"
                                    class="btn btn-primary btn-sm">
                                    <i class="fa fa-trash-o"></i> Xóa
                                    </button>`);
                        container.append(btnRemoveAppendieDocuments);

                        /*container.append(`<button type="button" class="btn btn-primary btn-sm" data-toggle="modal" data-target="#modal-default">
                Copy appendice
              </button>`);*/
                        // create new row.
                        $('#btnAddAppendieDocuments').on('click', function () {
                            const datarow = {
                                id: 2,
                                name: '',
                                code: '',
                                documentNumber: '',
                                reviewNumber: '',
                                fileName: ''
                            };
                            observableSourceAppendieDocuments.push(datarow);
                        });

                        btnRemoveAppendieDocuments.click(function () {
                            const selectedrowindex = grdAppendieDocuments.jqxGrid('getselectedrowindex');
                            const rowscount = grdAppendieDocuments.jqxGrid('getdatainformation').rowscount;
                            if (selectedrowindex >= 0 && selectedrowindex < rowscount) {
                                observableSourceAppendieDocuments.splice(selectedrowindex, 1);
                            }
                        });
                    },
                    columns: [
                        {
                            text: 'STT',
                            sortable: false,
                            filterable: false,
                            editable: false,
                            groupable: false,
                            draggable: false,
                            pinned: true,
                            datafield: '',
                            columntype: 'number',
                            width: 40,
                            cellsrenderer: function (row, column, value) {
                                return "<div style='margin:4px;'>" + (value + 1) + "</div>";
                            }
                        },
                        {
                            text: documentNameText,
                            columntype: 'textbox',
                            datafield: 'name',
                            pinned: false,
                            editable: true,
                            width: 300,
                            validation: function (cell, value) {
                                if (isVariableHaveDefaultVal(value)) {
                                    return { result: false, message: "Tên phụ lục không được bỏ trống(Enter để update thông tin)" };
                                }

                                if (isExistsAppendice(value, cell.row)) {
                                    return { result: false, message: "Tên phụ lục đã tồn tại trong danh sách" };
                                }

                                updateAppendiceFile(observableSourceAppendieDocuments[cell.row].fileName, value);
                                return true;
                            }
                        },
                        {
                            text: 'File',
                            columntype: 'template',
                            datafield: 'fileName',
                            pinned: false,
                            editable: true,
                            createeditor: function (row, cellvalue, editor, celltext, cellwidth, cellheight) {
                                let fileUpload = $(`<input name="appendiceFile" data-name="${observableSourceAppendieDocuments[row].name}" type="file"/>`).prependTo(editor);
                                fileUpload.change(function (e) {
                                    if (!isVariableHaveDefaultVal(e.target.files[0])) {
                                       addFileToAppendiceFiles(e.target.files[0], $(this).attr('data-name'));
                                    }
                                });
                            },
                            initeditor: function (row, cellvalue, editor, celltext, pressedChar) {
                                const file = getFileAppendice(observableSourceAppendieDocuments[row].name);
                                if (!isVariableHaveDefaultVal(file)) {
                                    let list = new DataTransfer();
                                    list.items.add(file.file);
                                    editor.find(`input[name=appendiceFile]`).attr('data-name', observableSourceAppendieDocuments[row].name);
                                    editor.find(`input[name=appendiceFile]`).prop('files', list.files);
                                }
                            },
                            geteditorvalue: function (row, cellvalue, editor) {
                                const file = getFileAppendice(observableSourceAppendieDocuments[row].name);
                                if (!isVariableHaveDefaultVal(file)) {
                                    return file.file.name;
                                }
                                return '';
                            },
                            validation: function (cell, value) {
                                if (isVariableHaveDefaultVal(observableSourceAppendieDocuments[cell.row].name)) {
                                    return { result: false, message: "Vui lòng nhập tên phụ lục trước khi attach file" };
                                }
                                const file = getFileAppendice(observableSourceAppendieDocuments[cell.row].name);
                                if (isVariableHaveDefaultVal(file)) {
                                    return { result: false, message: "File phụ lục không được bỏ trống(Enter để update thông tin)" };
                                }
                                return true;
                            },
                            width: 300
                        },
                        {
                            text: documentNumberText,
                            columntype: 'textbox',
                            datafield: 'documentNumber',
                            hidden: true,
                            pinned: false,
                            editable: false,
                            width: 300
                        },
                        {
                            text: reviewNumberText,
                            columntype: 'textbox',
                            datafield: 'reviewNumber',
                            hidden: false,
                            pinned: false,
                            editable: true,
                            width: 300
                        },
                        {
                            text: 'Mã tài liệu',
                            columntype: 'textbox',
                            hidden: true,
                            datafield: 'code',
                            pinned: false,
                            editable: false,
                            width: 300
                        }
                    ]
                });
        }

        function updateAppendiceFile(fileName, appendiceName) {
            const index = appendiceFiles.findIndex(f => {
                return f.file.name === fileName;
            });
            if (index >= 0) {
                appendiceFiles[index].appendiceName = appendiceName;
            } 
        }

        function addFileToAppendiceFiles(file, appendiceName) {
            const index = appendiceFiles.findIndex(f => {
                return f.appendiceName === appendiceName;
            });
            if (index >= 0) {
                appendiceFiles[index] = {
                    appendiceName: appendiceName,
                    file: file
                };
            } else {
                appendiceFiles.push({
                    appendiceName: appendiceName,
                    file: file
                });
            }
        }

        function isExistsAppendice(appendiceName, currentRowIndex) {
            let index = -1;
            for (let i = 0; i < appendieDocumentsDataAdapter.records.length; i++) {
                if (i !== currentRowIndex && appendieDocumentsDataAdapter.records[i].name === appendiceName) {
                    index = i;
                    break;
                }
            }
            return index >=0;
        }

        function getFileAppendice(appendiceName) {
            const index = appendiceFiles.findIndex(f => {
                return f.appendiceName === appendiceName;
            });
            return appendiceFiles[index];
        }

        function getAppendices() {
            let appendices = appendieDocumentsDataAdapter.records.filter(function (d) {
                if (!isVariableHaveDefaultVal(d.name)) {
                    return true;
                }
                return false;
            });
            return appendices;
        }
    </script>
    <!--Script get masterdata-->
    <script>
        const getAllDepartmentsUrl = `${hostUrl}/api/masterdatas/getalldepartments`;
        const getAllUsersUrl = `${hostUrl}/api/masterdatas/getallusers`;
        const getAllCompaniesUrl = `${hostUrl}/api/masterdatas/getallcompanies`;
        const getAllDocumentTypesUrl = `${hostUrl}/api/documenttypes/getalldocumenttypes`;
        const getAllGroupsFromActiveDirectoryUrl = `${hostUrl}/api/masterdatas/getallgroupsfromactivedirectory`;
        const getAllGroupsUrl = `${hostUrl}/api/groups/getallgroups`;
        const getAllModulesUrl = `${hostUrl}/api/modules/getallmodules`;
        const getAllDocumentsUrl = `${hostUrl}/api/documents/getalldocuments`;
        const getAllStatusesUrl = `${hostUrl}/api/statuses/getallstatuses`;
        const getAllPromulgateStatusesUrl = `${hostUrl}/api/promulgatestatuses/getallpromulgatestatuses`;
        const createDocumentUrl = `${hostUrl}/api/documents/create`;
        const createAndReleaseDocumentUrl = `${hostUrl}/api/documents/reviewandrelease`;

        // Get all statuses
        function getAllStatuses() {
            return $.getJSON(getAllStatusesUrl,
                function (data) {
                    statuses = data.filter(s => { return s.code.toLowerCase() === "approved"; }).map((status) => {
                        return {
                            id: status.id,
                            text: status.name
                        };
                    });
                });
        }

        // Get all promulgateStatuses
        function getAllPromulgateStatuses() {
            return $.getJSON(getAllPromulgateStatusesUrl,
                function (data) {
                    promulgateStatuses = data.filter(s => { return s.code.toLowerCase() === "new"; }).map((status) => {
                        return {
                            id: status.id,
                            text: status.name
                        };
                    });
                });
        }

        // Get all documents
        function getAllDocuments() {
            return $.getJSON(getAllDocumentsUrl,
                function (data) {
                    documents = data.map(document => {
                        return {
                            name: document.name,
                            code: document.code,
                            displayText: `${document.name} ${document.code} ${document.reviewNumber}`,
                            documentNumber: document.documentNumber,
                            fileName: document.fileName,
                            folderName: document.folderName,
                            reviewNumber: document.reviewNumber,
                            effectiveDate: document.effectiveDate,
                            reviewDate: document.reviewDate
                        };
                    });
                });
        }

        // Get departments
        function getAllDepartments() {
            return $.getJSON(getAllDepartmentsUrl,
                function (data) {
                    departments = data.map((department) => {
                        return { id: department.code, text: department.name };
                    });

                    groups = data.map((department) => {
                        return { id: department.code, text: department.name, email: department.email };
                    });
                });
        }

        // Get Users
        function getAllUsers() {
            return $.getJSON(getAllUsersUrl,
                function (data) {
                    users = data/*.filter((user) => user.active === true)*/.map((user) => {
                        return { id: user.userName, text: user.text, disabled: !user.active, departmentName: user.departmentName };
                    });
                });
        }

        // Get companies
        function getAllCompanies() {
            return $.getJSON(getAllCompaniesUrl,
                function (data) {
                    companies = data.map((company) => {
                        return { id: company.code, text: company.name };
                    });
                });
        }

        // Get documenttypes
        function getAllDocumentTypes() {
            return $.getJSON(getAllDocumentTypesUrl,
                function (data) {
                    documentTypes = data.map((documentType) => {
                        return { id: documentType.code, text: documentType.name };
                    });
                });
        }

        // Get groups
        function getAllGroupsFromActiveDirectory() {
            return $.getJSON(getAllGroupsFromActiveDirectoryUrl,
                function (data) {
                    groups = data.map((group) => {
                        return { id: group, text: group };
                    });
                });
        }

        // Get groups
        function getAllGroups() {
            return $.getJSON(getAllGroupsUrl,
                function (data) {
                    groups = data.map((group) => {
                        return { id: group.code, text: group.name };
                    });
                });
        }

        // Get modules
        function getAllModules() {
            return $.getJSON(getAllModulesUrl,
                function (data) {
                    modules = data.map((module) => {
                        return { id: module.code, text: module.name };
                    });
                });
        }

        function formatUserResult(user) {
            if (!user.id)
                return user.text;
            const text = user.text;
            const fullName = text;
            const department = user.departmentName;
            return $(`<span>${fullName}</span><div><small style="color: #a5a0a0">@L(DocumentResourceNames.DepartmentName): ${department}</small></div>`);
        }

        function formatUserSelection(user) {
            if (!user.id)
                return user.text;
            const text = user.text;
            return $(`<span>${text}</span>`);
        }

        function formatGroupSelection(group) {
            if (!group.id)
                return group.text;
            const text = group.text;
            return $(`<span>${text}</span>`);
        }

        function formatGroupResult(group) {
            if (!group.id)
                return group.text;
            const text = group.text;
            return $(`<span>${text}</span><div><small style="color: #a5a0a0">Email: ${group.email}</small></div>`);
        }

        $('#Code').val(genDocumentCode());
        
        $('#ReviewNumber').inputmask({ mask: "9*/9*"});

        Promise.all([getAllUsers(),
            getAllDepartments(),
            getAllCompanies(),
            getAllDocumentTypes(),
            //getAllGroupsFromActiveDirectory(),
            // getAllGroups(),
            getAllModules(),
            getAllDocuments(),
            getAllStatuses(),
            getAllPromulgateStatuses()
        ]).then(() => {
            $Approver.select2({
                data: users,
                templateResult: formatUserResult,
                templateSelection: formatUserSelection
            });

            $Drafter.select2({
                data: users,
                templateResult: formatUserResult,
                templateSelection: formatUserSelection
            });

            $Auditor.select2({
                data: users,
                templateResult: formatUserResult,
                templateSelection: formatUserSelection
            });

            $CompanyCode.select2({
                data: companies
            });

            $DepartmentCode.select2({
                data: departments
            });

            $DocumentType.select2({
                data: documentTypes
            });

            $ScopeOfDeloyment.select2({
                data: groups,
                templateResult: formatGroupResult,
                templateSelection: formatGroupSelection
            });

            $Module.select2({
                data: modules
            });

            $StatusId.select2({
                data: statuses
            });

            $PromulgateStatusId.select2({
                data: promulgateStatuses
            });

            initGrdRelateToDocuments();

            initGrdAppendieDocuments();
            // all requests finished successfully
        }).catch(() => {
            // all requests finished but one or more failed
        })

    </script>
    <!--Actions-->
    <script>

        function create() {
            // Create an FormData object
            let formData = $("#formDocument").submit(function (e) {
                e.preventDefault();
                return;
            });
            //formData[0] contain form data only
            // You can directly make object via using form id but it require all ajax operation inside $("form").submit(<!-- Ajax Here   -->)
            formData = new FormData(formData[0]);

            // Document files
            for (let i = 0, len = storedFiles.length; i < len; i++) {
                formData.append('files', storedFiles[i]);
            }

            // Appendice files
            for (let i = 0; i < appendiceFiles.length; i++) {
                formData.append('appendiceFiles', appendiceFiles[i].file);
            }

            const appendices = getAppendices();
            objectToFormData(appendices, formData, 'appendices', []);
 
            if (!isVariableHaveDefaultVal($Approver.val()))
                formData.set('Approver', $Approver.val().join(';'));
            if (!isVariableHaveDefaultVal($Auditor.val()))
                formData.set('Auditor', $Auditor.val().join(';'));
            if (!isVariableHaveDefaultVal($Drafter.val()))
                formData.set('Drafter', $Drafter.val().join(';'));
            if (!isVariableHaveDefaultVal($ScopeOfDeloyment.val()))
                formData.set('ScopeOfDeloyment', $ScopeOfDeloyment.val().join(';'));

            const relateToDocuments = getRelateToDocuments().map((document) => document.code);
            formData.set('RelateToDocuments', relateToDocuments.join(';'));

            $.ajax({
                url: createAndReleaseDocumentUrl,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                cache: false,
                success: function (event, settings, xhr) {
                    xhr.message = {
                        infor: '@L(DocumentResourceNames.MessageCreateDocumentSuccessed)',
                        returnUrl: `${hostUrl}/document/list`
                    };
                }
            });
        }
        function createAndRelease() {
            // Create an FormData object
            let formData = $("#formDocument").submit(function (e) {
                e.preventDefault();
                return;
            });
            //formData[0] contain form data only
            // You can directly make object via using form id but it require all ajax operation inside $("form").submit(<!-- Ajax Here   -->)
            formData = new FormData(formData[0]);

            // Document files
            for (let i = 0, len = storedFiles.length; i < len; i++) {
                formData.append('files', storedFiles[i]);
            }

            // Appendice files
            for (let i = 0; i < appendiceFiles.length; i++) {
                formData.append('appendiceFiles', appendiceFiles[i].file);
            }

            const appendices = getAppendices();
            objectToFormData(appendices, formData, 'appendices', []);
 
            if (!isVariableHaveDefaultVal($Approver.val()))
                formData.set('Approver', $Approver.val().join(';'));
            if (!isVariableHaveDefaultVal($Auditor.val()))
                formData.set('Auditor', $Auditor.val().join(';'));
            if (!isVariableHaveDefaultVal($Drafter.val()))
                formData.set('Drafter', $Drafter.val().join(';'));
            if (!isVariableHaveDefaultVal($ScopeOfDeloyment.val()))
                formData.set('ScopeOfDeloyment', $ScopeOfDeloyment.val().join(';'));

            const relateToDocuments = getRelateToDocuments().map((document) => document.code);
            formData.set('RelateToDocuments', relateToDocuments.join(';'));

            $.ajax({
                url: createAndReleaseDocumentUrl,
                type: "POST",
                data: formData,
                contentType: false,
                processData: false,
                cache: false,
                success: function (event, settings, xhr) {
                    xhr.message = {
                        infor: '@L(DocumentResourceNames.MessageCreateDocumentSuccessed)',
                        returnUrl: `${hostUrl}/document/list`
                    };
                }
            });
        }
    </script>
    <!--Events-->
    <script>
        $(document).ready(function () {
            const enterKeyUp = $.Event("keyup", { keyCode: 13 });

            $('#btnAll').click(function () {
                $ScopeOfDeloyment.val(groups.map(g => { return g.id;})).trigger('change');;
            });

            $('#btnRemoveAll').click(function () {
                $ScopeOfDeloyment.val([]).trigger('change');;
            });


            $('#DCCAudited').jqxCheckBox();

            $('#DCCAudited').on('change', function (event) {
                const checked = event.args.checked;
                $('input:hidden[name=DCCAudited]').val(`${checked}`);
            });

            $('#Active').jqxCheckBox();

            $('#Active').on('change', function (event) {
                const checked = event.args.checked;
                $('input:hidden[name=Active]').val(`${checked}`);
            });

            // Effective date
            $('#EffectiveDate').datepicker({
                language: cultureSelector,
                showOn: 'focus',
                autoclose: true
            });

            // Review date
            $('#ReviewDate').datepicker({
                language: cultureSelector,
                showOn: 'focus',
                autoclose: true
            });

            if (cultureSelector === 'vi-VN') {
                $.validate({
                    language: vietNamese,
                    form: '#formDocument',
                    addValidClassOnAll: true
                });
            } else {
                $.validate({
                    language: cultureSelector,
                    form: '#formDocument',
                    addValidClassOnAll: true
                });
            }

            $("#formDocument").submit(function (e) {
                e.preventDefault();
                let btn = $(this).find("button[type=submit]:focus");
                if (btn.length > 0) {
                    if (btn[0].id === 'btnSubmit') {
                        create();
                    } else {
                        createAndRelease();
                    }
                }
            });

            $CompanyCode.on('change', function (e) {
                const selectedCompany = $CompanyCode.select2('data');
                if (!isVariableHaveDefaultVal(selectedCompany)) {
                    $CompanyName.val(selectedCompany[0].text);
                }
            });

            $DepartmentCode.on('change', function (e) {
                const selectedDepartment = $DepartmentCode.select2('data');
                if (!isVariableHaveDefaultVal(selectedDepartment)) {
                    $DepartmentName.val(selectedDepartment[0].text);
                }
            });

            let format = 'DD/MM/YYYY HH:mm:ss';
            if (cultureSelector !== 'en')
                format = $.fn.datepicker.dates[cultureSelector].format.toUpperCase() + ' HH:mm:ss';
            else
                format = $.fn.datepicker.defaults.format.toUpperCase();

            $OneYear.click(function () {
                let date = moment($('#EffectiveDate').val(), format, false).add(1, 'year');
                $('#ReviewDate').datepicker('setDate', date.toDate());
            });

            $TwoYear.click(function () {
                let date = moment($('#EffectiveDate').val(), format, false).add(2, 'year');
                $('#ReviewDate').datepicker('setDate', date.toDate());
            });
        });
    </script>
    <!--Copy Appendice popup-->
    <script>
        const txtCopySearch = $('#txtCopySearch');
        const grdCopyDocument = $("#grdCopyDocument");
        txtCopySearch.on("keyup", function (e) {
            const key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;
            if (key === 13) {
                grdCopyDocument.jqxGrid('updatebounddata');
                grdCopyDocument.jqxGrid('gotopage', 0);
            }
        });

        let source =
        {
            url: '@Url.ActionApiWithHost("documents", "searchdocumentsbytokenpaged")',
            datatype: "json",
            id: "id",
            updaterow: function (rowid, rowdata, commit) {
                // synchronize with the server - send update command
                // call commit with parameter true if the synchronization with the server is successful
                // and with parameter false if the synchronization failder.
                commit(true);
            },
            cache: false,
            pagesize: 20,
            sort: function () {
                // update the grid and send a request to the server.
                grdCopyDocument.jqxGrid('updatebounddata', 'sort');
            },
            pagesizeoptions: ["20", "40", "60"],
            datafields:
                [
                    { name: 'id', type: 'int' },
                    { name: 'code', type: 'string' },
                    { name: 'companyName', type: 'string' },
                    { name: 'departmentName', type: 'string' },
                    { name: 'module', type: 'string' },
                    { name: 'documentType', type: 'string' },
                    { name: 'name', type: 'string' },
                    { name: 'documentNumber', type: 'string' },
                    { name: 'reviewNumber', type: 'string' },
                    { name: 'description', type: 'string' },
                    { name: 'fileName', type: 'string' },
                    { name: 'folderName', type: 'string' },
                    { name: 'replaceOf', type: 'string' },
                    { name: 'relateToDocuments', type: 'string'},
                    { name: 'contentChange', type: 'string'}
                ],
            root: 'data',
            beforeprocessing: function (data) {
                source.totalrecords = data.total;
                grdCopyDocument.jqxGrid('addgroup', 'companyName');
                grdCopyDocument.jqxGrid('addgroup', 'departmentName');
                grdCopyDocument.jqxGrid('addgroup', 'documentType');
            }
        };
        let dataAdapter = new $.jqx.dataAdapter(source,
            {
                beforeSend: function (jqXHR, settings) {
                    settings.url = `${settings.url}&token=${txtCopySearch.val()}&advancedSearch=${$('#CopyAdvancedSearch').val()}`;
                    jqXHR.setRequestHeader('token', txtCopySearch.val());
                    jqXHR.setRequestHeader('advancedSearch', $('#CopyAdvancedSearch').val());
                }
            });

        function initGrid() {

            grdCopyDocument.jqxGrid(
                {
                    width: '100%',
                    height: 400,
                    source: dataAdapter,
                    pageable: true,
                    autorowheight: true,
                    columnsresize: true,
                    altrows: true,
                    editable: true,
                    sortable: true,
                    groupable: true,
                    showgroupsheader: false,
                    pagesizeoptions: ["20", "40", "60"],
                    localization: getLocalization('@CurrentLanguage.Name'),
                    selectionmode: 'singlerow',
                    editmode: 'singlecell',
                    showstatusbar: false,
                    columns: [
                        {
                            text: 'STT',
                            sortable: false,
                            filterable: false,
                            editable: false,
                            groupable: false,
                            draggable: false,
                            pinned: true,
                            datafield: '',
                            columntype: 'number',
                            width: 30,
                            cellsrenderer: function (row, column, value) {
                                return "<div style='margin:4px;'>" + (value + 1) + "</div>";
                            }
                        },
                        {
                            text: documentCodeText,
                            columntype: 'textbox',
                            datafield: 'code',
                            pinned: true,
                            editable: false,
                            width: 100,
                            cellsrenderer: function (row, column, value, defaultHtml) {
                                const element = $(defaultHtml);
                                //element.html(`<a href="${updateDocumentUrl}?id=${dataAdapter.records[row].id}"> <i class="fa fa-pencil"></i> ${value} </a>`);
                                element.html(`<a href="/document/detail?code=${dataAdapter.records[row].code}"> <i class="fa fa-pencil"></i> ${value} </a>`);

                                return element[0].outerHTML;
                            }
                        },
                        {
                            text: 'Files',
                            columntype: 'textbox',
                            datafield: 'fileName',
                            pinned: true,
                            editable: false,
                            width: 250,
                            cellsrenderer: function (row, column, value, defaultHtml) {
                                const element = $(defaultHtml);
                                const fileNames = value.split(';');
                                const folderName = dataAdapter.records[row].folderName;
                                if (!isVariableHaveDefaultVal(fileNames)
                                    && !isVariableHaveDefaultVal(folderName)) {
                                    if (fileNames.length > 0) {
                                        let html = '';
                                        for (let index = 0; index < fileNames.length; index++) {
                                            if (!isVariableHaveDefaultVal(fileNames[index])) {
                                                const filePath = `${uploadFileRootPath}/${folderName}/${fileNames[index]}`;
                                                let fileIcon = 'fa fa-file-o';
                                                switch (getFileExtension(fileNames[index])) {
                                                    case 'pdf':
                                                        fileIcon = 'fa fa-file-pdf-o';
                                                        break;
                                                    case 'xls':
                                                        fileIcon = 'fa fa-file-excel-o';
                                                        break;
                                                    case 'xlsx':
                                                        fileIcon = 'fa fa-file-excel-o';
                                                        break;
                                                    case 'doc':
                                                        fileIcon = 'fa fa-file-word-o';
                                                        break;
                                                    case 'docx':
                                                        fileIcon = 'fa fa-file-word-o';
                                                        break;
                                                }
                                                html = html + `<a target="_blank" href="${filePath}?"> <i class="${fileIcon}"></i> ${fileNames[index]}</a><br>`;
                                            }
                                        }
                                        if (!isVariableHaveDefaultVal(html)) {
                                            element.html(html);
                                        }
                                    }
                                }
                                return element[0].outerHTML;
                            }
                        },
                        {
                            text: documentNameText,
                            columntype: 'textbox',
                            datafield: 'name',
                            pinned: true,
                            editable: false,
                            width: 200
                        },
                        {
                            text: companyText,
                            columntype: 'textbox',
                            datafield: 'companyName',
                            pinned: false,
                            editable: false,
                            width: 150
                        },
                        {
                            text: departmentText,
                            columntype: 'textbox',
                            datafield: 'departmentName',
                            pinned: false,
                            editable: false,
                            width: 150
                        },
                        {
                            text: moduleText,
                            columntype: 'textbox',
                            datafield: 'module',
                            editable: false,
                            width: 150
                        },
                        {
                            text: replaceOfText,
                            columntype: 'textbox',
                            datafield: 'replaceOf',
                            editable: false,
                            width: 150,
                            cellsrenderer: function (row, column, value, defaultHtml) {
                                const element = $(defaultHtml);
                                const documents = value.split(';');
                                if (!isVariableHaveDefaultVal(documents)) {
                                    if (documents.length > 0) {
                                        let html = '';
                                        for (let index = 0; index < documents.length; index++) {
                                            if (!isVariableHaveDefaultVal(documents[index])) {
                                                html = html + `<a target="_blank" href="/document/detail?code=${documents[index]}"> <i class="fa fa-file-o"></i> ${documents[index]}</a><br>`;
                                            }
                                        }
                                        if (!isVariableHaveDefaultVal(html)) {
                                            element.html(html);
                                        }
                                    }
                                }
                                return element[0].outerHTML;
                            }
                        },
                        {
                            text: relateDocumentText,
                            columntype: 'textbox',
                            datafield: 'relateToDocuments',
                            editable: false,
                            width: 150,
                            cellsrenderer: function (row, column, value, defaultHtml) {
                                const element = $(defaultHtml);
                                const documents = value.split(';');
                                if (!isVariableHaveDefaultVal(documents)) {
                                    if (documents.length > 0) {
                                        let html = '';
                                        for (let index = 0; index < documents.length; index++) {
                                            if (!isVariableHaveDefaultVal(documents[index])) {
                                                html = html + `<a target="_blank" href="/document/detail?code=${documents[index]}"> <i class="fa fa-file-o"></i> ${documents[index]}</a><br>`;
                                            }
                                        }
                                        if (!isVariableHaveDefaultVal(html)) {
                                            element.html(html);
                                        }
                                    }
                                }
                                return element[0].outerHTML;
                            }
                        },
                        {
                            text: documentTypeText,
                            columntype: 'textbox',
                            datafield: 'documentType',
                            editable: false,
                            width: 150
                        },
                        {
                            text: documentNumberText,
                            columntype: 'textbox',
                            datafield: 'documentNumber',
                            editable: false,
                            width: 150
                        },
                        {
                            text: reviewNumberText,
                            datafield: 'reviewNumber',
                            editable: false,
                            width: 150
                        }
                    ]
                });
        }
        $(document).ready(function () {
            $('#CopyAdvancedSearch').jqxCheckBox({ width: '90px', height: '20px' });
            $('#CopyAdvancedSearch').jqxCheckBox('uncheck');

            $('#CopyAdvancedSearch').on('change', function (event) {
                grdCopyDocument.jqxGrid('updatebounddata');
                grdCopyDocument.jqxGrid('gotopage', 0);
            });

            initGrid();
    });
    </script>
}
